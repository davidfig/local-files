{"version":3,"file":"localFiles.js","sourceRoot":"","sources":["src/localFiles.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAI,KAAK,GAAG,IAAI,CAAA;AA+BhB;;;GAGG;AACH,MAAM,UAAgB,UAAU,CAAC,IAAY;;QACzC,KAAK,GAAG,IAAI,CAAA;IAChB,CAAC;CAAA;AAED;;;GAGG;AACH,MAAM,UAAgB,GAAG;;QACrB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,oBAAoB,KAAK,MAAM,CAAC,CAAA;QAC7D,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,OAAO,IAAI,CAAA;IACf,CAAC;CAAA;AAED,eAAe;AACf,SAAe,KAAK,CAAC,MAAc,EAAE,IAAS;;QAC1C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,oBAAoB,KAAK,IAAI,MAAM,EAAE,EAAE;YAChE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAClD,CAAC,CAAA;QACF,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,OAAO,IAAI,CAAA;IACf,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,QAAQ,CAAC,QAAgB;;QAC3C,OAAO,MAAM,KAAK,CAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;IACpD,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,QAAQ,CAAC,QAAgB,EAAE,IAAS;;QACtD,OAAO,MAAM,KAAK,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;IACxD,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,IAAI,CAAC,QAAgB;;QACvC,OAAO,MAAM,KAAK,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;IAChD,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,IAAI,CAAC,QAAgB,EAAE,IAAS;;QAClD,OAAO,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;IACpD,CAAC;CAAA;AAED;;;GAGG;AACH,MAAM,UAAgB,MAAM,CAAC,QAAiB;;QAC1C,OAAO,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;IAC9C,CAAC;CAAA;AAED;;;GAGG;AACH,MAAM,UAAgB,MAAM,CAAC,QAAgB;;QACzC,OAAO,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;IAC9C,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,MAAM,CAAC,WAAmB,EAAE,WAAmB;;QACjE,OAAO,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAA;IAC9D,CAAC;CAAA;AAED;;;;GAIG;AACH,MAAM,UAAgB,IAAI,CAAC,QAAgB;;QACvC,OAAO,MAAM,KAAK,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;IAC5C,CAAC;CAAA","sourcesContent":["let _port = 9988\n\nexport interface Stats {\n    isFile(): boolean;\n    isDirectory(): boolean;\n    isBlockDevice(): boolean;\n    isCharacterDevice(): boolean;\n    isSymbolicLink(): boolean;\n    isFIFO(): boolean;\n    isSocket(): boolean;\n\n    dev: number\n    ino: number\n    mode: number\n    nlink: number\n    uid: number\n    gid: number\n    rdev: number\n    size: number\n    blksize: number\n    blocks: number\n    atimeMs: number\n    mtimeMs: number\n    ctimeMs: number\n    birthtimeMs: number\n    atime: Date\n    mtime: Date\n    ctime: Date\n    birthtime: Date\n}\n\n/**\n * Change port to access localFiles server\n * @param {number} port (default is 9988)\n */\nexport async function changePort(port: number) {\n    _port = port\n}\n\n/**\n * get a directory listing\n * @returns {string[]}\n */\nexport async function dir(): Promise<string[]> {\n    const response = await fetch(`http://localhost:${_port}/dir`)\n    const json = await response.json()\n    return json\n}\n\n/** @private */\nasync function _post(method: string, body: any): Promise<any> {\n    const response = await fetch(`http://localhost:${_port}/${method}`, {\n        method: 'POST',\n        mode: 'cors',\n        body: JSON.stringify(body),\n        headers: { 'content-type': \"application/json\" }\n    })\n    const json = await response.json()\n    return json\n}\n\n/**\n * Downloads a javascript data structure from the server\n * @param {string} filename of json file\n * @returns {*}\n */\nexport async function loadJson(filename: string): Promise<any> {\n    return await _post('downloadJson', { filename })\n}\n\n/**\n * Uploads a javascript data structure to the server\n * @param {string} filename of json file\n * @param {*} data\n */\nexport async function saveJson(filename: string, data: any): Promise<any> {\n    return await _post('uploadJson', { filename, data })\n}\n\n/**\n * Downloads a file from the server\n * @param {string} filename of file\n * @returns {string} contents of the file in string format\n */\nexport async function load(filename: string): Promise<string | null> {\n    return await _post('download', { filename })\n}\n\n/**\n * Uploads a javascript data structure to the server\n * @param {string} filename of json file\n * @param {*} data\n */\nexport async function save(filename: string, data: any): Promise<any> {\n    return await _post('upload', { filename, data })\n}\n\n/**\n * Checks whether file exists on server\n * @param {string} filename\n */\nexport async function exists(filename: boolean): Promise<boolean> {\n    return await _post('exists', { filename })\n}\n\n/**\n * Deletes a file from the server\n * @param {string} filename\n */\nexport async function unlink(filename: string): Promise<void> {\n    return await _post('unlink', { filename })\n}\n\n/**\n * renames a file\n * @param {string} oldFilename\n * @param {string} newFilename\n */\nexport async function rename(oldFilename: string, newFilename: string): Promise<void> {\n    return await _post('rename', { oldFilename, newFilename })\n}\n\n/**\n * returns fs.stat results for filename\n * @param {string} filename\n * @returns {Stats}\n */\nexport async function stat(filename: string): Promise<Stats> {\n    return await _post('stat', { filename })\n}"]}