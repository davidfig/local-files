{"version":3,"file":"localFilesServer.js","sourceRoot":"","sources":["../src/localFilesServer.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\nimport path from 'path'\nimport express from 'express'\nimport cors from 'cors'\n\nexport interface LocalFilesOptions {\n    directory?: string\n    port?: number\n    log?: (...data: any[]) => void\n    error?: (...data: any[]) => void\n    limit?: string\n}\n\ninterface LocalFilesOptionsAll {\n    directory: string\n    port: number\n    log: (...data: any[]) => void\n    error: (...data: any[]) => void\n    limit: string\n}\n\nconst defaultOptions: LocalFilesOptions = {\n    directory: '.',\n    port: 9988,\n    log: console.log,\n    error: console.error,\n    limit: '500mb',\n}\n\n/**\n * create a localFiles server\n * @param {LocalFileOptions} [userOptions]\n * @param {string} [userOptions.directory='.'] to serve files\n * @param {number} [userOptions.port=9988] to host localFiles server\n * @param {Function} [userOptions.log=console.log] log output (if null then uses console.log, if false turns off logging)\n * @param {Function} [userOptions.error=console.error] log error (if null then uses console.error, if false turns off error logging)\n * @param {string} [userOptions.limit=\"500mb\"] limit for size of files served\n */\nexport function localFilesServer(userOptions: LocalFilesOptions = {}): Promise<void> {\n    return new Promise((resolve: () => void) => {\n        const options: LocalFilesOptionsAll = { ...defaultOptions as LocalFilesOptionsAll, ...userOptions as LocalFilesOptionsAll }\n        const resolveFilename = (filename = '') => path.join(options.directory, filename)\n        const app = express()\n        const log = options.log\n        const error = options.error\n        app.use(cors())\n        app.get('/dir', async (_: express.Request, result: express.Response) => {\n            const dir = await fs.readdir(resolveFilename())\n            log(`Dir request found ${dir.length} files.`)\n            result.json(dir)\n        })\n        app.use(express.json({ limit: options.limit }))\n        app.use(express.json())\n\n        app.post('/downloadJson', async (req: express.Request, res: express.Response) => {\n            try {\n                const file = await fs.readJSON(resolveFilename(req.body.filename))\n                res.json(file)\n                log(`Downloaded ${req.body.filename}.`)\n            }\n            catch (e) {\n                error(`Error downloading ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n\n        app.post('/uploadJson', async (req: express.Request, res: express.Response) => {\n            try {\n                await fs.writeJSON(resolveFilename(req.body.filename), req.body.data)\n                res.json({})\n                log(`Uploaded ${req.body.filename}.`)\n            }\n            catch (e) {\n                error(`Error uploading ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n\n        app.post('/download', async (req: express.Request, res: express.Response) => {\n            try {\n                const file = await fs.readFile(resolveFilename(req.body.filename))\n                res.json({ file: file.toString() })\n                log(`Downloaded ${req.body.filename}.`)\n            }\n            catch (e) {\n                error(`Error downloading ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n\n        app.post('/upload', async (req: express.Request, res: express.Response) => {\n            try {\n                await fs.outputFile(resolveFilename(req.body.filename), req.body.data)\n                res.json({})\n                log(`Uploaded ${req.body.filename}.`)\n            }\n            catch (e) {\n                error(`Error uploading ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n\n        app.post('/exists', async (req: express.Request, res: express.Response) => {\n            try {\n                const exists = await fs.pathExists(resolveFilename(req.body.filename))\n                res.json(exists)\n                log(`Check if ${req.body.filename} exists (${exists ? 'it does' : 'it does not'}).`)\n            }\n            catch (e) {\n                error(`Error checking if ${req.body.filename} exists: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n        app.post('/rename', async (req: express.Request, res: express.Response) => {\n            try {\n                await fs.rename(resolveFilename(req.body.oldFilename), resolveFilename(req.body.newFilename))\n                res.json({})\n                log(`Rename ${req.body.oldFilename} to ${req.body.newFilename}.`)\n            }\n            catch (e) {\n                error(`Error renaming ${req.body.oldFilename} to ${req.body.newFilename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n        app.post('/unlink', async (req: express.Request, res: express.Response) => {\n            try {\n                await fs.unlink(resolveFilename(req.body.filename))\n                res.json({})\n                log(`Unlink ${req.body.filename}.`)\n            }\n            catch (e) {\n                error(`Error unlinking ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n        app.post('/stat', async (req: express.Request, res: express.Response) => {\n            try {\n                res.json(await fs.stat(resolveFilename(req.body.filename)))\n            }\n            catch (e) {\n                error(`Error checking stat of ${req.body.filename}: ${e.message}`)\n                res.json({ error: e.message })\n            }\n        })\n        app.listen(options.port, () => {\n            console.log(`local-files server for ${options.directory}/ running on localhost:${options.port}`)\n            resolve()\n        })\n    })\n}"]}